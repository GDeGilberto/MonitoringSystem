@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Domain.Constants
@using Infrastructure.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrar</PageTitle>

<div class="container min-v-100 d-flex align-items-center py-5 py-md-0">
    <div class="row justify-content-center gx-5">
        <!-- Tarjeta del formulario -->
        <div class="col-lg-5 col-md-8 mb-5 mb-lg-0">
            <div class="card border-0 shadow-lg rounded-3 overflow-hidden">
                <div class="card-header bg-success text-white py-4">
                    <div class="d-flex align-items-center gap-3 px-3">
                        <i class="bi bi-person-plus-fill fs-1"></i>
                        <div>
                            <h2 class="h4 mb-0">Crear nueva cuenta</h2>
                            <p class="small mb-0">Completa tus datos para registrarte</p>
                        </div>
                    </div>
                </div>
                <div class="card-body p-4 p-md-5">
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" role="alert" />

                        <div class="form-floating mb-4">
                            <InputText @bind-Value="Input.Email" class="form-control" id="email"
                                       autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email">Correo electrónico</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger small mt-1" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password"
                                       autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="password">Contraseña</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger small mt-1" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" id="confirm-password"
                                       autocomplete="new-password" aria-required="true" placeholder="password" />
                            <label for="confirm-password">Confirmar contraseña</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger small mt-1" />
                        </div>

                        <div class="form-floating mb-4">
                            <InputSelect @bind-Value="Input.Rol" class="form-control" id="rol">
                                @foreach (var role in Roles.AllRoles)
                                {
                                    <option value="@role">@role</option>
                                }
                            </InputSelect>
                            <label for="rol">Seleccionar Rol</label>
                        </div>

                        <button type="submit" class="w-100 btn btn-success btn-lg rounded-pill py-3 fw-bold">
                            <i class="bi bi-person-check me-2"></i>Registrarse
                        </button>
                    </EditForm>

                    <div class="text-center mt-4">
                        <p class="small text-muted">
                            ¿Ya tienes una cuenta?
                            <a href="/Account/Login" class="text-decoration-none fw-semibold">Inicia sesión</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección informativa -->
        <div class="col-lg-5 col-md-8 d-flex flex-column justify-content-center">
            <div class="text-center px-lg-5">
                
                <h3 class="fw-bold mb-3">Empieza a monitorear con confianza</h3>
                <p class="lead text-muted mb-4">
                    Crea tu cuenta y mantén el control total de tus estaciones, sin perder ni una gota de información.
                </p>

                <img src="/svg/undraw_sign-up_z2ku.svg" class="img-fluid mb-4" style="max-height: 250px;" alt="Ilustración de registro" />
                @* 
                <!-- Sección para autenticación externa (opcional) -->
                <h3>Usa otros servicios para authentication.</h3>
                <hr />
                <ExternalLoginPicker />
                *@
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("Usuario creó una nueva cuenta con contraseña.");

        // Asegurar que existan todos los roles definidos en el sistema
        await EnsureRolesExistAsync();
        
        await AssignRoleToUserAsync(user);

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    /// <summary>
    /// Asegura que todos los roles definidos en el sistema existan en la base de datos
    /// </summary>
    private async Task EnsureRolesExistAsync()
    {
        foreach (var role in Roles.AllRoles)
        {
            if (!await RoleManager.RoleExistsAsync(role))
            {
                Logger.LogInformation($"Creando rol: {role}");
                await RoleManager.CreateAsync(new IdentityRole(role));
            }
        }
    }

    /// <summary>
    /// Asigna el rol seleccionado por el usuario o el rol por defecto (Usuario)
    /// </summary>
    private async Task AssignRoleToUserAsync(ApplicationUser user)
    {
        var roleToAssign = !string.IsNullOrEmpty(Input.Rol) ? Input.Rol : Roles.User;
        
        // Verificar que el rol exista antes de asignarlo
        if (await RoleManager.RoleExistsAsync(roleToAssign))
        {
            Logger.LogInformation($"Asignando rol {roleToAssign} al usuario {user.Email}");
            await UserManager.AddToRoleAsync(user, roleToAssign);
        }
        else
        {
            Logger.LogWarning($"No se pudo asignar el rol {roleToAssign} porque no existe. Asignando rol por defecto.");
            await UserManager.AddToRoleAsync(user, Roles.User);
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "La {0} debe tener al menos {2} y un máximo {1} caracteres.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación de contraseña no son iguales.")]
        public string ConfirmPassword { get; set; } = "";

        public string? Rol { get; set; }
    }
}
